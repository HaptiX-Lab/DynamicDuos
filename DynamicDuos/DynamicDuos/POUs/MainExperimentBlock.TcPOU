<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MainExperimentBlock" Id="{73062513-3b4d-4e94-a84f-ab2158a9ec36}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK MainExperimentBlock
VAR_INPUT

	fbMotorReference : REFERENCE TO FB_AnalogMotorDriver; 
	fbMetadata : REFERENCE TO MetadataBlock; 

END_VAR
VAR_OUTPUT

	// Variables for logging
	nEncoderCounts : LINT; 
	rEncoderDegrees : REAL;
	rEncoderLastDegrees : REAL; 
	rEncoderRadians : REAL; 
	rEncoderLastRadians : REAL; 
	rEncoderRadiansBuffer : ARRAY[1..FILTER_WINDOW] OF REAL; 
	rEncoderRadiansSum : REAL; 
	rEncoderRadiansFiltered : REAL; 
	nFilterBufferCount : INT := 0; 

	// Variables for motor control 
	rCommandVoltage : REAL; 
	rCommandTorque : REAL; 
	rError : REAL; 
	rLastError : REAL; 
	rProportional : REAL; 
	rIntegral : REAL := 0; 
	rDerivative : REAL; 
	bPIDStale : BOOL := TRUE;
	rControlOutput : REAL; 
	Kp : REAL := 0.3; 
	Ki : REAL := 0.03; 
	Kd : REAL := 0.05; 
	d_time : REAL := 0.0001; // Time step (100 us). 
	
	// Variables for load cell 
	rGripForce : REAL; 

END_VAR
VAR CONSTANT
	nMaxTestNumber : INT := 10; 
	
	// Load constants (for virtual wall) 
	aLOAD_CONSTANTS : ARRAY[1..5] OF REAL := [0.1, 0.2, 0.3, 0.4, 0.5]; 
	
	// Constants for digital filtering 
	FILTER_WINDOW : INT := 11; 
	
END_VAR
VAR
	
	// Variables to keep track of the actual encoder/motor setup 
	fbEncoder1 : FB_QuadratureEncoder;
	fbLoadCell : FB_AnalogLoadCellInput; 
	rNormalizedWheelPosition : REAL; 
	
	// Settings to manage experiment behavior.  
	eSequenceState : MainStateType := MainStateType.PRE_LAUNCH; 
	eNextSequenceState : MainStateType := MainStateType.PRE_LAUNCH;
	stMainStepState : ST_MainTrialStep;  
	eSetupSubState : (HOMING, WAITING); 
	nCurrentTestIndex : INT := 0; 
	nCurrentLaunchIndex : INT := 0; 
	bLaunchTestSequence : BOOL := FALSE; 
	bTestIsLive : BOOL := FALSE; 
	nTestIsLive : INT; 
	bDemoMode : BOOL := FALSE; 
	nDemoLoadSetting : INT := 1; 
	aTestSettings : ARRAY[1..nMaxTestNumber] OF ST_LoadExperimentSetting; 
	bInitTestSettings : BOOL := FALSE; 
	bInitHLCatch : BOOL := FALSE; // Implement Heavy-Light Catch
	bInitLHCatch : BOOL := FALSE; // Implement Light-Heavy Catch
	bInitExtrap : BOOL := FALSE; // Implement Random Extrapolation
	binitInterp : BOOL := FALSE; // Implement Random Interpolation
		
	// Intermediate variables for virtual spring
	rAngleThreshold : REAL := LREAL_TO_REAL(DEG_TO_RAD(80)); 
	rStartGripThreshold : REAL := 1.5; // Threshold to start the test (amount of force required by hand). 

	// Helpers 
	i : INT; 
	j : INT; 
	TempString : T_MaxString; 
	bWheelIsIdle : BOOL; 
	fbTonHoming : TON := (PT := T#500MS); // Time to give state machine to home
	drand : DRAND; 
	rRand : LREAL; // Random variable. 
	fbSystemTime : GETSYSTEMTIME; 
	fbFormatString : FB_FormatString; 
	fbLogger : MainExperimentBlockLogger; 
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Initialize settings array if need be 
IF NOT bInitTestSettings THEN
	FOR i := 1 TO nMaxTestNumber DO
		aTestSettings[i].Test_Finished := FALSE; 
		aTestSettings[i].Weight := 1;
	END_FOR
	bInitTestSettings := TRUE; 
END_IF
IF bInitHLCatch THEN 
	FOR i := 1 TO nMaxTestNumber DO 
		aTestSettings[i].Test_Finished := FALSE; 
		aTestSettings[i].Weight := 3;
	END_FOR	
	
	// Generate random place to start light case
	drand(Num => rRand); 
	
	// Start index 
	j := LREAL_TO_INT(rRand * 6 + 3);

	FOR i := j TO nMaxTestNumber DO
		aTestSettings[i].Weight := 1; 
	END_FOR 
	bInitHLCatch := FALSE; 
END_IF
IF bInitLHCatch THEN
	FOR i := 1 TO nMaxTestNumber DO 
		aTestSettings[i].Test_Finished := FALSE; 
		aTestSettings[i].Weight := 1; 
	END_FOR
	
	// Generate random video to start light case
	drand(Num => rRand); 
	
	// Start index 
	j := LREAL_TO_INT(rRand * 6 + 3); 
	
	FOR i := j TO nMaxTestNumber DO 
		aTestSettings[i].Weight := 3; 
	END_FOR
	bInitLHCatch := FALSE; 
END_IF

// Read sensors on current iteration

// Encoders 
fbEncoder1(); 
nEncoderCounts := fbEncoder1.nNetCounts; 
rEncoderDegrees := fbEncoder1.rDegrees; 
rEncoderLastDegrees := fbEncoder1.rLastDegrees; 
rEncoderRadians := fbEncoder1.rRadians; 
rEncoderLastRadians := fbEncoder1.rLastRadians;

// Update digital filter. 
IF nFilterBufferCount < FILTER_WINDOW THEN 
	nFilterBufferCount := nFilterBufferCount + 1; 
END_IF

// Shift the buffer and add the new reading 
FOR i := FILTER_WINDOW TO 2 BY -1 DO
	rEncoderRadiansBuffer[i] := rEncoderRadiansBuffer[i-1]; 
END_FOR
rEncoderRadiansBuffer[1] := rEncoderRadians;

// Computer the moving average only if the buffer is full
j := MIN(nFilterBufferCount, FILTER_WINDOW); 
rEncoderRadiansSum := 0.0; 
FOR i:= 1 TO j DO
	rEncoderRadiansSum := rEncoderRadiansSum + rEncoderRadiansBuffer[i];
END_FOR
rEncoderRadiansFiltered := rEncoderRadiansSum / j; 


// Load cell 
fbLoadCell(); 
rGripForce := fbLoadCell.rCalibratedOutput; 


// Now we check to see if we're in demo mode, or we're in a live testing mode. 
IF bDemoMode THEN

	// Apply the standard virtual wall condition. 
	rNormalizedWheelPosition := rEncoderRadians / 0.1; 
	
	IF rNormalizedWheelPosition > 1 THEN
		rCommandTorque := -1 * aLOAD_CONSTANTS[nDemoLoadSetting]; 
		rCommandVoltage := MotorTorqueToCommandV(rCommandTorque := rCommandTorque);
	ELSIF rNormalizedWheelPosition > 0 THEN
		rCommandTorque := -1 * rNormalizedWheelPosition * aLOAD_CONSTANTS[nDemoLoadSetting]; 
		rCommandVoltage := MotorTorqueToCommandV(rCommandTorque := rCommandTorque);	
	ELSE
		rCommandTorque := 0; 
		rCommandVoltage := 0;
	END_IF
	
	// Then send command to the motor. 
	fbMotorReference(rCommandVoltage := rCommandVoltage); 
	

ELSE

	// Generate the file name and update the logger. 
	fbFormatString(
		sFormat := '%s_test_%d.csv', 
		arg1 := F_STRING(fbMetadata.sUserID), 
		arg2 := F_INT(nCurrentLaunchIndex));
		
	fbLogger(sFileName := fbFormatString.sOut); 
	

	// In the live testing mode, we're running through the state machine. 
	CASE eSequenceState OF
		
		MainStateType.PRE_LAUNCH: 
		
			// First we start by updating options
			IF bLaunchTestSequence THEN 
				eNextSequenceState := MainStateType.TEST_SETUP; 
				eSetupSubState := HOMING; 
				
				// Also set the first test index 
				nCurrentTestIndex := 1; 
				
				// And put this signal back down 
				bLaunchTestSequence := FALSE; 
				
			ELSE
				eNextSequenceState := MainStateType.PRE_LAUNCH; 
			END_IF
			
			// We also need to make sure any motor commands are no longer hanging over 
			bTestIsLive := FALSE; 
			rCommandTorque := 0; 
			rCommandVoltage := 0; 
			fbMotorReference(rCommandVoltage := rCommandVoltage); 
	
		// We are getting the test ready. 
		MainStateType.TEST_SETUP: 
		
			CASE eSetupSubState OF
				
				HOMING: 
				
					// In this state, we need to recenter the motor back to the 0 point, and 
					// we also need to wait for the triggering signal. 
					rError := 0 - rEncoderRadiansFiltered; 
					rProportional := Kp * rError; 
					rIntegral := rIntegral + (rError * d_time); 
					rDerivative := (rError - rLastError) / d_time; 
					rLastError := rError; 
					//rCommandTorque := -1 * ((3/2) * rEncoderRadians - (2/3) * rEncoderLastRadians);
					IF bPIDStale THEN
						rCommandTorque := rProportional;
						rIntegral := 0; 
						bPIDStale := FALSE; 
					ELSE 
						rCommandTorque := rProportional + (Ki * rIntegral) + (Kd * rDerivative);
					END_IF
					rCommandVoltage := MotorTorqueToCommandV(rCommandTorque := rCommandTorque); 
					fbMotorReference(rCommandVoltage := rCommandVoltage); 
					
					// Check to see if the wheel has been idle for long enough. 
					bWheelIsIdle := rGripForce < rStartGripThreshold AND ABS(rEncoderDegrees) < 5;  
					fbTonHoming(IN := bWheelIsIdle); 
					
					IF fbTonHoming.Q THEN
						eSetupSubState := WAITING; 
					END_IF
					
				WAITING:
					IF rGripForce > rStartGripThreshold THEN
						bTestIsLive := TRUE; 
						eNextSequenceState := MainStateType.TEST_ACTIVE; 
						bWheelIsIdle := FALSE; 
						fbTonHoming(IN := bWheelIsIdle); 
						eSetupSubState := HOMING; 
					END_IF 
					
			END_CASE
		
		// Handle logic for actually completing the test. 
		MainStateType.TEST_ACTIVE: 
			
			// Apply the standard virtual wall condition. 
			rNormalizedWheelPosition := rEncoderRadians / 0.1; 
			
			IF rNormalizedWheelPosition > 1 THEN
				rCommandTorque := -1 * aLOAD_CONSTANTS[aTestSettings[nCurrentTestIndex].Weight]; 
				rCommandVoltage := MotorTorqueToCommandV(rCommandTorque := rCommandTorque);
			ELSIF rNormalizedWheelPosition > 0 THEN
				rCommandTorque := -1 * rNormalizedWheelPosition * aLOAD_CONSTANTS[aTestSettings[nCurrentTestIndex].Weight]; 
				rCommandVoltage := MotorTorqueToCommandV(rCommandTorque := rCommandTorque);	
			ELSE
				rCommandTorque := 0; 
				rCommandVoltage := 0;
			END_IF
			
			// Then send command to the motor. 
			fbMotorReference(rCommandVoltage := rCommandVoltage);
			
			
			// Check to see if we need to get out of this state (test is finished) 
			IF rEncoderRadians > rAngleThreshold THEN
				aTestSettings[nCurrentTestIndex].Test_Finished := TRUE; 
				bTestIsLive := FALSE; 
		
				eNextSequenceState := MainStateType.WAITING_FOR_RELEASE; 
				
			END_IF
			

		MainStateType.WAITING_FOR_RELEASE: // Wait for the user to drop the wheel
		
			bWheelIsIdle := rGripForce < rStartGripThreshold; 
			fbTonHoming(IN := bWheelIsIdle);
		
			IF fbTonHoming.Q THEN
				// There's more tests to run! 
				IF nCurrentTestIndex < nMaxTestNumber THEN
					nCurrentTestIndex := nCurrentTestIndex + 1; 
					eNextSequenceState := MainStateType.TEST_SETUP; 
					bPIDStale := TRUE; 
				ELSE
					eNextSequenceState := MainStateType.TEST_FINISHED; 
				END_IF
				
				// Reset the timer 
				bWheelIsIdle := FALSE; 
				fbTonHoming(IN := bWheelIsIdle); 
				
			ELSE
				eNextSequenceState := MainStateType.WAITING_FOR_RELEASE; 
			END_IF
			
			rCommandTorque := 0; 
			rCommandVoltage := 0; 
			fbMotorReference(rCommandVoltage := rCommandVoltage); 
			
		MainStateType.TEST_FINISHED: 
			// trigger log writing. 
			fbLogger.writeLog(); 
			eNextSequenceState := MainStateType.PROCESSING_LOG; 
			
			
		MainStateType.PROCESSING_LOG: 
		
			// We need to check if the processing is still busy 
			IF fbLogger.bError THEN
				ADSLOGSTR(
					msgCtrlMask := ADSLOG_MSGTYPE_ERROR OR ADSLOG_MSGTYPE_MSGBOX,
					msgFmtStr := 'ERROR: Logger has failed during the save process %s', 
					strArg := ''); 
			ELSIF NOT fbLogger.bBusy THEN
				// Check for errors, then go back to pre-launch 
				nCurrentTestIndex := 0; 
				nCurrentLaunchIndex := nCurrentLaunchIndex + 1; 
				eNextSequenceState := MainStateType.PRE_LAUNCH; 
			END_IF
			
	END_CASE

	// Update logs 
	// Check whether or not to post to the log. 
	IF nCurrentTestIndex > 0 THEN
		fbSystemTime(timeLoDW => stMainStepState.nTimestepLow, timeHiDW => stMainStepState.nTimestepHigh);
		stMainStepState.rEncoderDegrees := rEncoderDegrees; 
		stMainStepState.rEncoderRadians := rEncoderRadians;
		stMainStepState.rCommandVoltage := rCommandVoltage; 
		stMainStepState.rCommandTorque := rCommandTorque; 
		stMainStepState.rWallTorque := aLOAD_CONSTANTS[aTestSettings[nCurrentTestIndex].Weight];
		stMainStepState.rGripForce := rGripForce; 
		stMainStepState.sSequenceStateString := TO_STRING(eSequenceState); 
		stMainStepState.nCurrentTestIndex := nCurrentTestIndex; 
		stMainStepState.nTestIsLive := BOOL_TO_INT(bTestIsLive); 
	END_IF
	
	IF eSequenceState = MainStateType.TEST_ACTIVE THEN
		// Push the step to the log. 
		fbLogger.addStep(stNewStep := stMainStepState); 
	END_IF
	
	// Update state for next iteration. 
	eSequenceState := eNextSequenceState; 
	

END_IF

// Update globals for logging 
GVL.ENCODER_1_COUNTER_VALUE := nEncoderCounts; 
GVL.ENCODER_1_DEGREES := rEncoderDegrees;
GVL.MOTOR_1_APPLIED_VOLTAGE := rCommandVoltage; 
GVL.LOAD_CELL_NEWTONS := rGripForce; ]]></ST>
    </Implementation>
    <Method Name="Reset" Id="{70fc258a-3469-43c3-95ec-4ff32650e4a8}">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbEncoder1.Reset(); ]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MainExperimentBlock">
      <LineId Id="365" Count="0" />
      <LineId Id="367" Count="1" />
      <LineId Id="373" Count="0" />
      <LineId Id="375" Count="0" />
      <LineId Id="374" Count="0" />
      <LineId Id="561" Count="0" />
      <LineId Id="369" Count="0" />
      <LineId Id="566" Count="1" />
      <LineId Id="573" Count="0" />
      <LineId Id="575" Count="0" />
      <LineId Id="574" Count="0" />
      <LineId Id="571" Count="0" />
      <LineId Id="577" Count="0" />
      <LineId Id="576" Count="0" />
      <LineId Id="578" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="579" Count="0" />
      <LineId Id="583" Count="0" />
      <LineId Id="582" Count="0" />
      <LineId Id="585" Count="0" />
      <LineId Id="584" Count="0" />
      <LineId Id="603" Count="0" />
      <LineId Id="568" Count="0" />
      <LineId Id="586" Count="1" />
      <LineId Id="589" Count="0" />
      <LineId Id="591" Count="0" />
      <LineId Id="590" Count="0" />
      <LineId Id="592" Count="10" />
      <LineId Id="588" Count="0" />
      <LineId Id="366" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="221" Count="1" />
      <LineId Id="30" Count="2" />
      <LineId Id="218" Count="2" />
      <LineId Id="846" Count="0" />
      <LineId Id="845" Count="0" />
      <LineId Id="847" Count="0" />
      <LineId Id="849" Count="1" />
      <LineId Id="857" Count="0" />
      <LineId Id="853" Count="0" />
      <LineId Id="852" Count="0" />
      <LineId Id="854" Count="2" />
      <LineId Id="859" Count="0" />
      <LineId Id="858" Count="0" />
      <LineId Id="860" Count="1" />
      <LineId Id="863" Count="3" />
      <LineId Id="851" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="229" Count="2" />
      <LineId Id="233" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="242" Count="2" />
      <LineId Id="254" Count="0" />
      <LineId Id="245" Count="2" />
      <LineId Id="255" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="729" Count="0" />
      <LineId Id="724" Count="0" />
      <LineId Id="723" Count="0" />
      <LineId Id="725" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="726" Count="2" />
      <LineId Id="263" Count="0" />
      <LineId Id="722" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="282" Count="4" />
      <LineId Id="288" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="292" Count="6" />
      <LineId Id="291" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="299" Count="3" />
      <LineId Id="304" Count="1" />
      <LineId Id="277" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="306" Count="0" />
      <LineId Id="509" Count="1" />
      <LineId Id="514" Count="0" />
      <LineId Id="526" Count="0" />
      <LineId Id="539" Count="0" />
      <LineId Id="529" Count="8" />
      <LineId Id="748" Count="0" />
      <LineId Id="753" Count="1" />
      <LineId Id="750" Count="1" />
      <LineId Id="749" Count="0" />
      <LineId Id="538" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="540" Count="0" />
      <LineId Id="549" Count="0" />
      <LineId Id="547" Count="0" />
      <LineId Id="545" Count="0" />
      <LineId Id="550" Count="3" />
      <LineId Id="548" Count="0" />
      <LineId Id="543" Count="0" />
      <LineId Id="554" Count="1" />
      <LineId Id="560" Count="0" />
      <LineId Id="556" Count="1" />
      <LineId Id="559" Count="0" />
      <LineId Id="558" Count="0" />
      <LineId Id="542" Count="0" />
      <LineId Id="512" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="324" Count="0" />
      <LineId Id="323" Count="0" />
      <LineId Id="325" Count="2" />
      <LineId Id="342" Count="0" />
      <LineId Id="344" Count="11" />
      <LineId Id="343" Count="0" />
      <LineId Id="502" Count="0" />
      <LineId Id="356" Count="2" />
      <LineId Id="405" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="465" Count="4" />
      <LineId Id="471" Count="0" />
      <LineId Id="470" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="733" Count="0" />
      <LineId Id="731" Count="1" />
      <LineId Id="474" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="382" Count="1" />
      <LineId Id="501" Count="0" />
      <LineId Id="384" Count="1" />
      <LineId Id="379" Count="0" />
      <LineId Id="734" Count="0" />
      <LineId Id="736" Count="2" />
      <LineId Id="735" Count="0" />
      <LineId Id="480" Count="1" />
      <LineId Id="475" Count="4" />
      <LineId Id="389" Count="2" />
      <LineId Id="721" Count="0" />
      <LineId Id="392" Count="3" />
      <LineId Id="707" Count="0" />
      <LineId Id="709" Count="2" />
      <LineId Id="713" Count="3" />
      <LineId Id="718" Count="2" />
      <LineId Id="717" Count="0" />
      <LineId Id="712" Count="0" />
      <LineId Id="322" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="740" Count="0" />
      <LineId Id="689" Count="0" />
      <LineId Id="693" Count="8" />
      <LineId Id="741" Count="0" />
      <LineId Id="690" Count="1" />
      <LineId Id="702" Count="0" />
      <LineId Id="706" Count="0" />
      <LineId Id="703" Count="0" />
      <LineId Id="692" Count="0" />
      <LineId Id="704" Count="0" />
      <LineId Id="404" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="61" Count="3" />
      <LineId Id="9" Count="0" />
      <LineId Id="106" Count="0" />
    </LineIds>
    <LineIds Name="MainExperimentBlock.Reset">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>