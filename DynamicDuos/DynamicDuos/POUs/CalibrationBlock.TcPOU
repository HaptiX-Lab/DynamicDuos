<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CalibrationBlock" Id="{808fb392-0321-4ad3-ac5f-7deb84640061}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CalibrationBlock
VAR_INPUT

	fbMotorReference : REFERENCE TO FB_AnalogMotorDriver; 
	fbMetadata : REFERENCE TO MetadataBlock; 	

END_VAR
VAR_OUTPUT

	// Variables for logging 
	nEncoderCounts : LINT; 
	rEncoderDegrees : REAL; 
	rEncoderLastDegrees : REAL; 	
	rEncoderRadians : REAL; 
	rEncoderLastRadians : REAL; 
	rEncoderRadiansBuffer : ARRAY[1..FILTER_WINDOW] OF REAL; 
	rEncoderRadiansSum : REAL; 
	rEncoderRadiansFiltered : REAL; 
	nFilterBufferCount : INT := 0; 
	
	// Variables for motor control 
	rCommandVoltage : REAL; 
	rVirtualSpringTorque : REAL; // Torque applied by any vritual spring
	rAppliedTorque : REAL;  // Torque applied as part of the test
	rCommandTorque : REAL; // The sum of the two variables above.  
		rError : REAL; 
	rLastError : REAL; 
	rProportional : REAL; 
	rIntegral : REAL := 0; 
	rDerivative : REAL; 
	bPIDStale : BOOL := TRUE;
	rControlOutput : REAL; 
	Kp : REAL := 0.3; 
	Ki : REAL := 0.03; 
	Kd : REAL := 0.05; 
	d_time : REAL := 0.0001; // Time step (100 us). 
	
	// Variables for load cell 
	rGripForce : REAL; 

END_VAR

// Constants used for the program 
VAR CONSTANT
	rAngleNormalizationFactor : REAL := 90; 
	nMaxTrialNumber : UINT := 10; 
	FILTER_WINDOW : INT := 11; 
END_VAR

VAR
	
	// Variables to keep track of the actual encoder/motor setup
	fbEncoder1 : FB_QuadratureEncoder; 
	fbLoadCell : FB_AnalogLoadCellInput; // TODO: Change everything to top level reference maybe? 
	
	////// BEGIN GUI TEST OPTIONS
	//// All fields in the next section are in some way or another set by the GUI, and define 
	//// the type of test to take place.
	// 1. Test type
	bTestTypeHuman : BOOL; // Whether or not this a human or motor test 
	bTestTypeHumanLIVE : BOOL; 
	
	// 2. Number of trials
	nTrialNumber : UINT := 1; // Number of calibration trials to run in succession 
	nTrialNumberLIVE : UINT; 
	
	// 3. Trigger type
	bManualPulse : BOOL; // Whether to use manual pulse or grip schedule. 
	bManualPulseLIVE : BOOL; 
	bManualPulseTimerEnable : BOOL; 
	bManualPulseTimerEnableLIVE : BOOL;
	rManualPulseTimerValue : REAL; 
	rManualPulseTimerValueLIVE : REAL;
	
	// 4. Trigger controls
	bUseConstantGripTrigger : BOOL;
	bUseConstantGripTriggerLIVE : BOOL;
	aGripSchedule : ARRAY[1..nMaxTrialNumber] OF REAL;
	aGripScheduleLIVE : ARRAY[1..nMaxTrialNumber] OF REAL;  
	rCurrentGripThreshold : REAL := 0; 
	
	// 5. Pulse controls 
	bUseConstantPulseTorque : BOOL; 
	bUseConstantPulseTorqueLIVE : BOOL;
	rConstantTorqueSetting : REAL; 	
	rConstantTorqueSettingLIVE : REAL;

	// 6. Test Controls
	bLaunchTestSequence : BOOL := FALSE; // Triggers an entry into the testing loop. 
 
	/////// END GUI TEST OPTIONS
	
	// State machine for actual calibration logic. 
	// At the begginning, we are in the configuration state. 
	eSequenceState : CalibStateType := CalibStateType.PRE_LAUNCH; 
	eNextSequenceState : CalibStateType := CalibStateType.PRE_LAUNCH; 
	eSetupSubState : (HOMING, WAITING); 
	nCurrentTestIndex : INT := 0; 
	bTestIsLive : BOOL := FALSE; 
	bTestIsLiveTrigger : BOOL := FALSE; 
	
	// Helper variables 
	i : INT;
	j : INT;  
	fbTonTest : TON := (PT := T#1000MS); // Timer for the entire test
	fbTonPulse : TON := (PT := T#200MS); // Timer for the duration of the pulse 
	fbTonHoming : TON := (PT := T#500MS); // Time to give state machine to home
	bMotorLimitHit : BOOL := FALSE; 
	stCalibStepState : ST_CalibTrialStep; 
	nCurrentLaunchIndex : INT := 0;
	TempString : T_MaxString;
	
	// Helper Functions 
	fbLogger : CalibrationBlockLogger; 
	fbSystemTime : GETSYSTEMTIME; 
	fbFormatString : FB_FormatString; 
	nLastTimeStep : UDINT; 

	bWheelIsIdle: BOOL;
	rStartGripThreshold: REAL := 1.5;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[///////////// Read sensors on current iteration
// Encoders 
fbEncoder1(); 
nEncoderCounts := fbEncoder1.nNetCounts; 
rEncoderDegrees := fbEncoder1.rDegrees; 
rEncoderLastDegrees := fbEncoder1.rLastDegrees; 
rEncoderRadians := fbEncoder1.rRadians; 
rEncoderLastRadians := fbEncoder1.rLastRadians; 

// Update digital filter. 
IF nFilterBufferCount < FILTER_WINDOW THEN 
	nFilterBufferCount := nFilterBufferCount + 1; 
END_IF

// Shift the buffer and add the new reading 
FOR i := FILTER_WINDOW TO 2 BY -1 DO
	rEncoderRadiansBuffer[i] := rEncoderRadiansBuffer[i-1]; 
END_FOR
rEncoderRadiansBuffer[1] := rEncoderRadians;

// Computer the moving average only if the buffer is full
j := MIN(nFilterBufferCount, FILTER_WINDOW); 
rEncoderRadiansSum := 0.0; 
FOR i:= 1 TO j DO
	rEncoderRadiansSum := rEncoderRadiansSum + rEncoderRadiansBuffer[i];
END_FOR
rEncoderRadiansFiltered := rEncoderRadiansSum / j; 

// Load cell 
fbLoadCell(); 
rGripForce := fbLoadCell.rCalibratedOutput; 
///////////// End sensor reading 

// Update Timers 
// First we compute the timer update 
fbTonTest(IN := bTestIsLive); 
fbTonPulse(IN := bTestIsLive); 

// Update file object 
// Here we also create the beginning of the logging file. 
// Generate the file name 
fbFormatString(
	sFormat := '%s_test_%d.csv', 
	arg1 := F_STRING(fbMetadata.sUserID), 
	arg2 := F_INT(nCurrentLaunchIndex));
	
fbLogger(sFileName := fbFormatString.sOut); 

// Now we go through the calibration logic. 
CASE eSequenceState OF
	
	// The user is currently setting permissions, we can update them live. 
	CalibStateType.PRE_LAUNCH:
	
		// First we start by updating options to the LIVE variables. 
		bTestTypeHumanLIVE := bTestTypeHuman; 
		nTrialNumberLIVE := nTrialNumber; 
		bManualPulseLIVE := bManualPulse; 
		bManualPulseTimerEnableLIVE := bManualPulseTimerEnable; 
		rManualPulseTimerValueLIVE := rManualPulseTimerValue;
		bUseConstantGripTriggerLIVE := bUseConstantGripTrigger; 
		
		FOR i := 1 TO nMaxTrialNumber DO
			aGripScheduleLIVE[i] := aGripSchedule[i]; 
		END_FOR
		
		bUseConstantPulseTorqueLIVE := bUseConstantPulseTorque;
		rConstantTorqueSettingLIVE := rConstantTorqueSetting; 
		
		IF bLaunchTestSequence THEN
			eNextSequenceState := CalibStateType.TEST_SETUP; 
			// Also set the first test index 
			nCurrentTestIndex := 1; 
			// And put this signal back down 
			bLaunchTestSequence := FALSE; 
				
		ELSE
			eNextSequenceState := CalibStateType.PRE_LAUNCH; 
		END_IF
		
		// We also need to make sure any motor commands are no longer hanging over 
		bTestIsLive := FALSE; 
		rCommandVoltage := 0; 
		rVirtualSpringTorque := 0; 
		rAppliedTorque := 0; 
		rCommandTorque := 0; 
		fbMotorReference(rCommandVoltage := rCommandVoltage); 
		
	// We are getting the test ready. 
	CalibStateType.TEST_SETUP: 
	
		CASE eSetupSubState OF
			HOMING: 
			
				bMotorLimitHit := FALSE; 
				
				// In this state, we need to recenter the motor back to the 0 point, and 
				// we also need to wait for the triggering signal. 
				rError := 0 - rEncoderRadiansFiltered; 
				rProportional := Kp * rError; 
				rIntegral := rIntegral + (rError * d_time); 
				rDerivative := (rError - rLastError) / d_time; 
				rLastError := rError; 
				//rCommandTorque := -1 * ((3/2) * rEncoderRadians - (2/3) * rEncoderLastRadians);
				IF bPIDStale THEN
					rAppliedTorque := rProportional;
					rIntegral := 0; 
					bPIDStale := FALSE; 
				ELSE 
					rAppliedTorque := rProportional + (Ki * rIntegral) + (Kd * rDerivative);
				END_IF
				rVirtualSpringTorque := 0; 
				rCommandTorque := rAppliedTorque + rVirtualSpringTorque; 
				rCommandVoltage := MotorTorqueToCommandV(rCommandTorque := rCommandTorque); 
				fbMotorReference(rCommandVoltage := rCommandVoltage); 
				
				// Check to see if the wheel has been idle for long enough. 
				bWheelIsIdle := rGripForce < rStartGripThreshold AND ABS(rEncoderDegrees) < 5;  
				fbTonHoming(IN := bWheelIsIdle); 
				
				IF fbTonHoming.Q THEN
					eSetupSubState := WAITING; 
				END_IF
				
			WAITING: 
			
				// Then we check to see if the test going live conditions are met: 
				// We need to figure out the type of trigger that's being used, and then we test for that. 
				// In the first scenario, it's if there is a manual pulse sent from the button
				IF bTestIsLiveTrigger AND bManualPulseLIVE AND NOT bManualPulseTimerEnableLIVE THEN // Manually push button 
					bTestIsLive := TRUE; 
					bTestIsLiveTrigger := FALSE; 
				END_IF 
				
				// Then we need to check if it's a grip trigger pulse. To do this, we first update what the grip trigger
				// should be, and then we check to see if the current grip matches that value 
				IF NOT bManualPulseLIVE THEN
					IF bUseConstantGripTrigger THEN
						rCurrentGripThreshold := aGripScheduleLIVE[1]; 
					ELSE
						rCurrentGripThreshold := aGripScheduleLIVE[nCurrentTestIndex]; 
					END_IF
					
					// Once we've set the value, we can compare to see if we've reached it 
					// Also gate so that the wheel is homed back to the center. 
					IF rGripForce > rCurrentGripThreshold AND ABS(fbEncoder1.rDegrees) < 5 THEN
						bTestIsLive := TRUE; 
					END_IF
					
				END_IF
				
				IF bTestIsLive THEN
					eNextSequenceState := CalibStateType.TEST_ACTIVE; 
					bWheelIsIdle := FALSE; 
					fbTonHoming(IN := bWheelIsIdle); 
					eSetupSubState := HOMING; 
				END_IF
			
			
		END_CASE
		
		
		
		
	// Then we handle logic for actually completing the test. 
	CalibStateType.TEST_ACTIVE: 
	
		// Timer is set based on bTestIsLive variable. Timers are updated at the beginning of every cycle. 	
		IF NOT fbTonPulse.Q THEN // If the pulse hasn't expired, send the pulse 
		
			// We want to split between motor test mode and human test mode. In motor test mode, we artificially add a virtual spring.
			IF NOT bTestTypeHumanLIVE THEN
				
				rAppliedTorque := rConstantTorqueSettingLIVE; 
				rVirtualSpringTorque := -1 * 0.35 * rEncoderRadians;
				// rCommandTorque := rConstantTorqueSettingLIVE - 1 * (0.4 / rAngleNormalizationFactor) * fbEncoder1.rDegrees; 
			ELSE
			
				IF NOT bUseConstantPulseTorque THEN
					rAppliedTorque := 0.4 + 0.02 * rCurrentGripThreshold; 	
				ELSE
					rAppliedTorque := rConstantTorqueSettingLIVE; 
				END_IF
				
				rVirtualSpringTorque := 0;  
			END_IF
			
			rCommandTorque := rAppliedTorque + rVirtualSpringTorque; 
			rCommandVoltage := MotorTorqueToCommandV(rCommandTorque := rCommandTorque); 
			
		ELSE
			IF NOT bTestTypeHumanLIVE THEN 
				rAppliedTorque := 0; 
				rVirtualSpringTorque := -1 * 0.35 * rEncoderRadians;
			ELSE
				rAppliedTorque := 0; 
				rVirtualSpringTorque := 0; 
			END_IF

			rCommandTorque := rAppliedTorque + rVirtualSpringTorque; 
			rCommandVoltage := MotorTorqueToCommandV(rCommandTorque := rCommandTorque); 
		END_IF
		
		fbMotorReference(rCommandVoltage := rCommandVoltage); 
	
		IF fbTonTest.Q THEN
			IF nCurrentTestIndex < UINT_TO_INT(nTrialNumberLIVE) THEN // We have more tests to run 
				bTestIsLive := FALSE;
				nCurrentTestIndex := nCurrentTestIndex + 1; 
				eNextSequenceState := CalibStateType.TEST_SETUP;
			ELSE	
				eNextSequenceState := CalibStateType.TEST_FINISHED; 
				bTestIsLive := FALSE; 
			END_IF
				
		END_IF
		
	
	CalibStateType.TEST_FINISHED: 
		// Start writing to the CSV Then let the log finish. 
		fbLogger.writeLog(); 
		eNextSequenceState := CalibStateType.PROCESSING_LOG; 
		
	CalibStateType.PROCESSING_LOG: 
	
		// We need to check if the processing is still busy
		IF fbLogger.bError THEN
			ADSLOGSTR(
				msgCtrlMask := ADSLOG_MSGTYPE_ERROR OR ADSLOG_MSGTYPE_MSGBOX, 
				msgFmtStr := 'ERROR: Logger has failed during the save process %s', 
				strArg := ''); 
		ELSIF NOT fbLogger.bBusy THEN
			// Now we can reset variabels and go back to the original state. 
			nCurrentTestIndex := 0; 
			nCurrentLaunchIndex := nCurrentLaunchIndex + 1;
			eNextSequenceState := CalibStateType.PRE_LAUNCH; 
		
		END_IF

END_CASE

// Update everything that just happened 
nLastTimeStep := stCalibStepState.nTimestepLow;
fbSystemTime(timeLoDW => stCalibStepState.nTimestepLow, timeHiDW => stCalibStepState.nTimeStepHigh); 
stCalibStepState.rEncoderDegrees := rEncoderDegrees; 
stCalibStepState.rEncoderRadians := rEncoderRadians; 
stCalibStepState.rCommandVoltage := rCommandVoltage; 
stCalibStepState.rCommandTorque := rCommandTorque; 
stCalibStepState.rAppliedTorque := rAppliedTorque; 
stCalibStepState.rVirtualSpringTorque := rVirtualSpringTorque; 
stCalibStepState.rGripForce := rGripForce; 
stCalibStepState.rCurrentGripThreshold := rCurrentGripThreshold; 
stCalibStepState.sSequenceStateString := TO_STRING(eSequenceState); 
stCalibStepState.nCurrentTestIndex := nCurrentTestIndex; 
stCalibStepState.nTestIsLive := BOOL_TO_INT(bTestIsLive); 

// If we're in the setup or active phase, we add it to the log. 
IF eSequenceState = CalibStateType.TEST_ACTIVE THEN
	fbLogger.addStep(stNewStep := stCalibStepState); 
END_IF

// Update state for next iteration
eSequenceState := eNextSequenceState; 

GVL.ENCODER_1_COUNTER_VALUE := nEncoderCounts; 
GVL.ENCODER_1_DEGREES := rEncoderDegrees; 
GVL.MOTOR_1_APPLIED_VOLTAGE := rCommandVoltage;
GVL.LOAD_CELL_NEWTONS := rGripForce; 
GVL.CALIB_SYSTEM_TIME := stCalibStepState.nTimestepLow - nLastTimeStep; ]]></ST>
    </Implementation>
    <Method Name="Reset" Id="{3efb2b45-adfc-4639-850c-d3b8867d9734}">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbEncoder1.Reset(); ]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="CalibrationBlock">
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="3" />
      <LineId Id="750" Count="0" />
      <LineId Id="741" Count="0" />
      <LineId Id="751" Count="0" />
      <LineId Id="884" Count="17" />
      <LineId Id="883" Count="0" />
      <LineId Id="36" Count="2" />
      <LineId Id="28" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="298" Count="1" />
      <LineId Id="297" Count="0" />
      <LineId Id="495" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="497" Count="1" />
      <LineId Id="983" Count="2" />
      <LineId Id="501" Count="0" />
      <LineId Id="600" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="156" Count="1" />
      <LineId Id="160" Count="0" />
      <LineId Id="162" Count="2" />
      <LineId Id="166" Count="4" />
      <LineId Id="165" Count="0" />
      <LineId Id="172" Count="1" />
      <LineId Id="179" Count="1" />
      <LineId Id="171" Count="0" />
      <LineId Id="181" Count="1" />
      <LineId Id="194" Count="2" />
      <LineId Id="214" Count="1" />
      <LineId Id="223" Count="1" />
      <LineId Id="462" Count="0" />
      <LineId Id="197" Count="2" />
      <LineId Id="267" Count="1" />
      <LineId Id="293" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="743" Count="1" />
      <LineId Id="408" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="201" Count="2" />
      <LineId Id="903" Count="2" />
      <LineId Id="907" Count="1" />
      <LineId Id="910" Count="0" />
      <LineId Id="912" Count="14" />
      <LineId Id="938" Count="1" />
      <LineId Id="927" Count="8" />
      <LineId Id="911" Count="0" />
      <LineId Id="940" Count="1" />
      <LineId Id="943" Count="0" />
      <LineId Id="945" Count="29" />
      <LineId Id="944" Count="0" />
      <LineId Id="942" Count="0" />
      <LineId Id="909" Count="0" />
      <LineId Id="906" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="264" Count="1" />
      <LineId Id="263" Count="0" />
      <LineId Id="274" Count="0" />
      <LineId Id="279" Count="1" />
      <LineId Id="629" Count="0" />
      <LineId Id="631" Count="1" />
      <LineId Id="753" Count="0" />
      <LineId Id="755" Count="1" />
      <LineId Id="633" Count="1" />
      <LineId Id="1107" Count="0" />
      <LineId Id="1109" Count="1" />
      <LineId Id="1108" Count="0" />
      <LineId Id="758" Count="0" />
      <LineId Id="1111" Count="1" />
      <LineId Id="759" Count="0" />
      <LineId Id="636" Count="0" />
      <LineId Id="383" Count="0" />
      <LineId Id="760" Count="0" />
      <LineId Id="637" Count="0" />
      <LineId Id="640" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="975" Count="1" />
      <LineId Id="978" Count="3" />
      <LineId Id="977" Count="0" />
      <LineId Id="762" Count="0" />
      <LineId Id="641" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="395" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="387" Count="3" />
      <LineId Id="386" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="391" Count="1" />
      <LineId Id="291" Count="0" />
      <LineId Id="412" Count="3" />
      <LineId Id="607" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="608" Count="1" />
      <LineId Id="611" Count="3" />
      <LineId Id="616" Count="3" />
      <LineId Id="621" Count="0" />
      <LineId Id="624" Count="1" />
      <LineId Id="623" Count="0" />
      <LineId Id="622" Count="0" />
      <LineId Id="615" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="404" Count="1" />
      <LineId Id="627" Count="0" />
      <LineId Id="406" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="765" Count="0" />
      <LineId Id="434" Count="1" />
      <LineId Id="763" Count="1" />
      <LineId Id="436" Count="1" />
      <LineId Id="439" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="444" Count="0" />
      <LineId Id="599" Count="0" />
      <LineId Id="598" Count="0" />
      <LineId Id="602" Count="2" />
      <LineId Id="185" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="47" Count="2" />
      <LineId Id="626" Count="0" />
    </LineIds>
    <LineIds Name="CalibrationBlock.Reset">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>