<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MainExperimentBlockLogger" Id="{3bad5606-8a69-47ad-ae34-7dda078223ce}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK MainExperimentBlockLogger
VAR_INPUT
	sFileName : STRING; 
END_VAR
VAR_OUTPUT
	bBusy : BOOL := FALSE; 
	bError : BOOL := FALSE; 
END_VAR
VAR CONSTANT
	nMaxBufferSize : UDINT := 2000000;
END_VAR
VAR
	cDefaultHeader : T_MaxString := 'TimeLow,TimeHigh,EncoderDegrees,EncoderRadians,CommandVoltage,CommandTorque,WallTorque,GripForce,SequenceState,CurrentTestIndex,TestIsLive $n'; 
	sDefaultDirectory : T_MaxString := 'C:\Users\njanne\Documents\DDTestLogs\main\';
	bWriteToDisk : BOOL := FALSE; 
	eFileWriteState : (IDLE, OPEN, WRITE, CLOSE, ERROR); 
	nFileWriteSubstep : INT := 0; 
	fbFileOpen : FB_FileOpen; 
	fbFilePuts : FB_FilePuts; 
	fbFileClose : FB_FileClose; 
	fbFormatString : FB_FormatString2; 
	nFileHandle : UINT; 
	bHeaderWriteComplete : BOOL := FALSE; 
	nWriteIndex : UDINT := 0; 
	sWritePercentFormat : T_MaxString := '%.2f %%'; 
	rWritePercent : REAL; 
	sWritePercentString : T_MaxString; 
	
	// For formatting data into a string. 
	sDataFormatStr1 : STRING := '%d,%d,%f,%f,%f,%f,%f,%f,%s,%d,'; 
	sDataFormatStr2 : STRING := '%d $n';
	sTempString : STRING(600); 
	sOutputString : STRING(600); 
	
	// For data storage 
	aTrialDataBuffer : ARRAY[0..nMaxBufferSize] OF ST_MainTrialStep; 
	nStepsSoFar : UDINT := 0;  // Current number of steps in the database. 
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bWriteToDisk THEN 
	

	// If it's time to write to disk, we need to empty the buffer. 
	CASE eFileWriteState OF 
		
		IDLE: 
			// Get everything ready. 
			nFileHandle := 0; 
			bBusy := TRUE; 
			eFileWriteState := OPEN; 
			nFileWriteSubstep := 0; 
			
		OPEN: 
			CASE nFileWriteSubstep OF 
				0: 
					// Opens a file for writing at the end of the file (append). 
					// if the file does not exist, a new file is created. 
					fbFileOpen(sPathName := CONCAT(sDefaultDirectory, sFilename), bExecute := FALSE); 
					fbFileOpen(
						bExecute		:= TRUE, 
						sNetID			:= '', 
						sPathName		:= CONCAT(sDefaultDirectory, sFilename),
						nMode 			:= FOPEN_MODEAPPEND OR FOPEN_MODETEXT); 
						
					nFileWriteSubstep := nFileWriteSubstep + 1; // Advance to wait for open. 
				
				1: 
					fbFileOpen(bExecute := FALSE); 
					IF NOT fbFileOpen.bBusy THEN
						IF fbFileOpen.bError THEN 
							eFileWriteState := ERROR; 
							nFileWriteSubstep := 0; 
						ELSE
							nFileHandle := fbFileOpen.hFile; 
							eFileWriteState := WRITE; 
							nFileWriteSubstep := 0; 
						END_IF
					END_IF
				END_CASE
				
			WRITE: 
				CASE nFileWriteSubstep OF 
					0 : 
						fbFilePuts(bExecute := FALSE); 
						
						// Check if we still need to write the header. 
						IF NOT bHeaderWriteComplete THEN 
							fbFilePuts(
								bExecute		:= TRUE, 
								sNetId			:= '', 
								hFile			:= nFileHandle, 
								sLine			:= cDefaultHeader); 
							bHeaderWriteComplete := TRUE; 
						ELSE
							// If the header is already written, then we're going for data. 
							// We need to first format the string. 
							fbFormatString(
								pFormatString := ADR(sDataFormatStr1), 
								arg1 := F_UDINT(aTrialDataBuffer[nWriteIndex].nTimestepLow), 
								arg2 := F_UDINT(aTrialDataBuffer[nWriteIndex].nTimestepHigh), 
								arg3 := F_REAL(aTrialDataBuffer[nWriteIndex].rEncoderDegrees), 
								arg4 := F_REAL(aTrialDataBuffer[nWriteIndex].rEncoderRadians), 
								arg5 := F_REAL(aTrialDataBuffer[nWriteIndex].rCommandVoltage), 
								arg6 := F_REAL(aTrialDataBuffer[nWriteIndex].rCommandTorque), 
								arg7 := F_REAL(aTrialDataBuffer[nWriteIndex].rWallTorque), 
								arg8 := F_REAL(aTrialDataBuffer[nWriteIndex].rGripForce), 
								arg9 := F_STRING(aTrialDataBuffer[nWriteIndex].sSequenceStateString), 
								arg10 := F_INT(aTrialDataBuffer[nWriteIndex].nCurrentTestIndex), 
								pDstString := ADR(sOutputString), 
								nDstSize := SIZEOF(sOutputString)); 
							
							fbFormatString(
								pFormatString := ADR(sDataFormatStr2), 
								arg1 := F_INT(aTrialDataBuffer[nWriteIndex].nTestIsLive), 
								pDstString := ADR(sTempString), 
								nDstSize := SIZEOF(sTempString)); 
								
							CONCAT2(
								pSrcString1 := ADR(sOutputString), 
								pSrcString2 := ADR(sTempString), 
								pDstString := ADR(sOutputString), 
								nDstSize := SIZEOF(sOutputString));
								
							fbFilePuts(
								bExecute		:= TRUE, 
								sNetId			:= '', 
								hFile			:= nFileHandle,
								sLine			:= sOutputString); 

							// Update write progress
							nWriteIndex := nWriteIndex + 1; 
							rWritePercent := UDINT_TO_REAL(nWriteIndex) / UDINT_TO_REAL(nStepsSoFar) * 100; 
							fbFormatString(
								pFormatString := ADR(sWritePercentFormat), 
								arg1 := F_REAL(rWritePercent), 
								pDstString := ADR(sWritePercentString), 
								nDstSize := SIZEOF(sWritePercentString)); 
							
						END_IF
						
						nFileWriteSubstep := nFileWriteSubstep + 1; // Advance to waiting state. 
						
					1 : 
						fbFilePuts(bExecute := FALSE); 
						IF NOT fbFilePuts.bBusy THEN 
							IF fbFilePuts.bError THEN 
								eFileWriteState := ERROR; 
								nFileWriteSubstep := 0; 
							ELSE 
								// Check if we have more things to write to the file. 
								IF nWriteIndex = nStepsSoFar THEN 
									eFileWriteState := CLOSE; 
								ELSE 
									eFileWriteState := WRITE; 
								END_IF
							END_IF
							nFileWriteSubstep := 0; 
						END_IF
						
				END_CASE
				
			CLOSE: 
				CASE nFileWriteSubstep OF 
					0:
						fbFileClose(bExecute := FALSE); 
						fbFileClose(
							bExecute		:= TRUE, 
							sNetId			:= '', 
							hFile			:= nFileHandle); 
						nFileWriteSubstep := nFileWriteSubstep + 1; 
						
					1: 
						fbFileClose(bExecute := FALSE); 
						IF NOT fbFileClose.bBusy THEN 
							IF fbFileClose.bError THEN 
								eFileWriteState := ERROR; 
								nFileWriteSubstep := 0; 
							ELSE
								eFileWriteState := IDLE; 
								nFileHandle := 0;
								
								// Also reset everything so that a new file can be written. 
								nStepsSoFar := 0; 
								nWriteIndex := 0; 
								nFileWriteSubstep := 0; 
								bHeaderWriteComplete := FALSE; 
								bBusy := FALSE; 
								bWriteToDisk := FALSE;
							END_IF
						END_IF
					END_CASE
						
			ERROR: 
				// Error, clear the handle and go back to idle. 
				nFileHandle := 0; 
				eFileWriteState := IDLE; 
				bError := TRUE; 
	
	END_CASE

END_IF]]></ST>
    </Implementation>
    <Method Name="addStep" Id="{0d05d5cd-7a07-46a7-a86c-9750e2b1114c}">
      <Declaration><![CDATA[METHOD addStep : BOOL
VAR_INPUT
	stNewStep : ST_MainTrialStep; // The incoming step to be added to memory
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// We need to simply copy over all the fields into the new position. 
// And then, update the counter. 
MEMCPY(
	destAddr := ADR(aTrialDataBuffer[nStepsSoFar]), 
	srcAddr := ADR(stNewStep), 
	n := SIZEOF(ST_MainTrialStep)); 
	
nStepsSoFar := nStepsSoFar + 1; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="writeLog" Id="{81848275-bb7f-4908-a7c1-70d06e43ddeb}">
      <Declaration><![CDATA[METHOD writeLog : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bWriteToDisk := TRUE; ]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MainExperimentBlockLogger">
      <LineId Id="9" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="43" Count="3" />
      <LineId Id="48" Count="0" />
      <LineId Id="52" Count="8" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="8" />
      <LineId Id="63" Count="0" />
      <LineId Id="74" Count="3" />
      <LineId Id="79" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="82" Count="3" />
      <LineId Id="78" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="86" Count="3" />
      <LineId Id="91" Count="4" />
      <LineId Id="97" Count="4" />
      <LineId Id="96" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="107" Count="15" />
      <LineId Id="124" Count="4" />
      <LineId Id="130" Count="5" />
      <LineId Id="205" Count="5" />
      <LineId Id="139" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="140" Count="4" />
      <LineId Id="123" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="145" Count="1" />
      <LineId Id="149" Count="4" />
      <LineId Id="155" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="156" Count="0" />
      <LineId Id="160" Count="2" />
      <LineId Id="164" Count="1" />
      <LineId Id="163" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="167" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="170" Count="10" />
      <LineId Id="182" Count="0" />
      <LineId Id="184" Count="4" />
      <LineId Id="190" Count="6" />
      <LineId Id="183" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="197" Count="3" />
      <LineId Id="202" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="MainExperimentBlockLogger.addStep">
      <LineId Id="10" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="MainExperimentBlockLogger.writeLog">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>