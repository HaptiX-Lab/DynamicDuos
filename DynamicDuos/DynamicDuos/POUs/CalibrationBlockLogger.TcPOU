<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CalibrationBlockLogger" Id="{9fd8a5ff-9bfb-4672-8a15-7a098b79d318}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK CalibrationBlockLogger
VAR_INPUT
	sFileName : STRING; 
END_VAR
VAR_OUTPUT
	bBusy : BOOL := FALSE; 
	bError : BOOL := FALSE; 
END_VAR
VAR CONSTANT
	nMaxBufferSize : UDINT := 2000000;
END_VAR
VAR
	cDefaultHeader : T_MaxString := 'TimeLow,TimeHigh,EncoderDegrees,EncoderRadians,CommandVoltage,CommandTorque,AppliedTorque,VSTorque,GripForce,GripThreshold,SequenceState,CurrentTestIndex,TestIsLive $n'; 
	sDefaultDirectory : T_MaxString := 'C:\Users\njanne\Documents\DDTestLogs\calibration\'; 
	bWriteToDisk : BOOL := FALSE; 
	eFileWriteState : (IDLE, OPEN, WRITE, CLOSE, ERROR); 
	nFileWriteSubstep : INT := 0; 
	fbFileOpen : FB_FileOpen; 
	fbFilePuts : FB_FilePuts; 
	fbFileClose : FB_FileClose; 
	fbFormatString : FB_FormatString2; 
	nFileHandle : UINT; 
	bHeaderWriteComplete : BOOL := FALSE; 
	nWriteIndex : UDINT := 0; 
	sWritePercentFormat : T_MaxString := '%.2f %%'; 
	rWritePercent : REAL; 
	sWritePercentString : T_MaxString; 
	
	// For formatting data into a string. 
	sDataFormatStr1 : STRING := '%d,%d,%f,%f,%f,%f,%f,'; 
	sDataFormatStr2 : STRING := '%f,%f,%f,%s,%d,%d $n';
	sTempString : STRING(600); 
	sOutputString : STRING(600); 
	
	aTrialDataBuffer : ARRAY[0..nMaxBufferSize] OF ST_CalibTrialStep; 
	nStepsSoFar : UDINT := 0; // Current number of steps in the database. 
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bWriteToDisk THEN

	// If it's time to write to disk, we need to empty the buffer.
	CASE eFileWriteState OF 
		
		IDLE: 
			// Get everything ready. 
			nFileHandle := 0; 
			bBusy := TRUE; 
			eFileWriteState := OPEN;
			nFileWriteSubstep := 0;  
	
		OPEN:
			CASE nFileWriteSubstep OF
				0:  
					// Opens a file for writing at the end of the file (append). 
					// If the file does not exist, a new file is created. 
					fbFileOpen(spathName := CONCAT(sDefaultDirectory, sFilename), bExecute := FALSE); 
					fbFileOpen(
						bExecute 		:= TRUE, 
						sNetID			:= '',
						sPathName 		:= CONCAT(sDefaultDirectory, sFilename), 
						nMode 			:= FOPEN_MODEAPPEND OR FOPEN_MODETEXT); 
		
					nFileWriteSubstep := nFileWriteSubstep + 1; // Advance to waiting state. 
	
				1: 
					fbFileOpen(bExecute := FALSE); 
					IF NOT fbFileOpen.bBusy THEN 
						IF fbFileOpen.bError THEN 
							eFileWriteState := ERROR; 
							nFileWriteSubstep := 0; 
						ELSE
							nFileHandle := fbFileOpen.hFile; 
							eFileWriteState := WRITE; 
							nFileWriteSubstep := 0; 
						END_IF
					END_IF
				END_CASE

		WRITE: 
			CASE nFileWriteSubstep OF 
				0 :
					fbFilePuts(bExecute := FALSE); 
					
					// Check if we still need to write the header. 
					IF NOT bHeaderWriteComplete THEN
						fbFilePuts(
							bExecute		:= TRUE, 
							sNetId			:= '', 
							hFile			:= nFileHandle, 
							sLine			:= cDefaultHeader);
						bHeaderWriteComplete := TRUE; 
					ELSE
						// If the header is already written, then we're going for data. 
						// We need to first format the string. 		
						fbFormatString(
							pFormatString := ADR(sDataFormatStr1), 
							arg1 := F_UDINT(aTrialDataBuffer[nWriteIndex].nTimestepLow), 
							arg2 := F_UDINT(aTrialDataBuffer[nWriteIndex].nTimeStepHigh),
							arg3 := F_REAL(aTrialDataBuffer[nWriteIndex].rEncoderDegrees), 
							arg4 := F_REAL(aTrialDataBuffer[nWriteIndex].rEncoderRadians), 
							arg5 := F_REAL(aTrialDataBuffer[nWriteIndex].rCommandVoltage), 
							arg6 := F_REAL(aTrialDataBuffer[nWriteIndex].rCommandTorque), 
							arg7 := F_REAL(aTrialDataBuffer[nWriteIndex].rAppliedTorque), 
							pDstString := ADR(sOutputString), 
							nDstSize := SIZEOF(sOutputString)); 
					
						fbFormatString(
							pFormatString := ADR(sDataFormatStr2), 
							arg1 := F_REAL(aTrialDataBuffer[nWriteIndex].rVirtualSpringTorque), 
							arg2 := F_REAL(aTrialDataBuffer[nWriteIndex].rGripForce), 
							arg3 := F_REAL(aTrialDataBuffer[nWriteIndex].rCurrentGripThreshold), 
							arg4 := F_STRING(aTrialDataBuffer[nWriteIndex].sSequenceStateString), 
							arg5 := F_INT(aTrialDataBuffer[nWriteIndex].nCurrentTestIndex), 
							arg6 := F_INT(aTrialDataBuffer[nWriteIndex].nTestIsLive), 
							pDstString := ADR(sTempString), 
							nDstSize := SIZEOF(sTempString)); 
							
						CONCAT2(
							pSrcString1 := ADR(sOutputString), 
							pSrcString2 := ADR(sTempString), 
							pDstString := ADR(sOutputString), 
							nDstSize := SIZEOF(sOutputString)); 
						
						fbFilePuts(
							bExecute		:= TRUE, 
							sNetId			:= '', 
							hFile			:= nFileHandle, 
							sLine			:= sOutputString); 
							
						nWriteIndex := nWriteIndex + 1; 
						// Update write progress 
						rWritePercent := UDINT_TO_REAL(nWriteIndex) / UDINT_TO_REAL(nStepsSoFar) * 100; 
						fbFormatString(
							pFormatString := ADR(sWritePercentFormat),
							arg1 := F_REAL(rWritePercent),
							pDstString := ADR(sWritePercentString), 
							nDstSize := SIZEOF(sWritePercentString)); 
				
					END_IF
					
					nFileWriteSubstep := nFileWriteSubstep + 1; // Advance to waiting state. 
					
				1 : 
					fbFilePuts(bExecute := FALSE); 
					IF NOT fbFilePuts.bBusy THEN
						IF fbFilePuts.bError THEN 
							eFileWriteState := ERROR; 
							nFileWriteSubstep := 0; 
						ELSE
							// Check if we have more things to write to the CSV still
							IF nWriteIndex = nStepsSoFar THEN
								eFileWriteState := CLOSE; 
							ELSE
								eFileWriteState := WRITE;
							END_IF 
						END_IF
						nFileWriteSubstep := 0; 
					END_IF
					
					
			END_CASE
		
		CLOSE: 
			CASE nFileWriteSubstep OF
				0: 
					fbFileClose(bExecute := FALSE); 
					fbFileClose(
						bExecute	:= TRUE, 
						sNetId		:= '', 
						hFile		:= nFileHandle); 
					nFileWriteSubstep := nFileWriteSubstep + 1; 
					
				1: 
					fbFileClose(bExecute := FALSE); 
					IF NOT fbFileClose.bBusy THEN
						IF fbFileClose.bError THEN 
							eFileWriteState := ERROR; 
							nFileWriteSubstep := 0; 
						ELSE
							eFileWriteState := IDLE; 
							nFileHandle := 0; 
							
							// Also reset everything so that a new test can overrite 
							nStepsSoFar := 0; 
							nWriteIndex := 0; 
							nFileWriteSubstep := 0; 
							bHeaderWriteComplete := FALSE; 
							bBusy := FALSE; 
							bWriteToDisk := FALSE; 
						END_IF
						
					END_IF
			END_CASE
				
		ERROR: 
			// Error, clear the handle and go back to idle. 
			nFileHandle := 0; 
			eFileWriteState := IDLE; 
			bError := TRUE; 
	
	END_CASE

END_IF]]></ST>
    </Implementation>
    <Method Name="addStep" Id="{4c28a066-0b87-4c1b-a907-37ae24503193}">
      <Declaration><![CDATA[METHOD addStep : BOOL
VAR_INPUT
	stNewStep : ST_CalibTrialStep; // The incoming step to be added to memory
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// We need to simply copy over all the fields into the new position. 
// And then, update the counter. 
MEMCPY(
	destAddr := ADR(aTrialDataBuffer[nStepsSoFar]), 
	srcAddr := ADR(stNewStep), 
	n := SIZEOF(ST_CalibTrialStep)); 
	
nStepsSoFar := nStepsSoFar + 1; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="getLogChunk" Id="{461b3053-7abd-4474-852a-4542c77654c0}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD getLogChunk : ST_CalibLogChunk
VAR_INPUT
	nChunkIndex : DINT; 
END_VAR
VAR
	nRemainingPts : DINT; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// We essentially want to copy the indices from 
// chunk index + max_chunk_size into the array that is sitting in the
// return type 
getLogChunk.nChunkIndex := nChunkIndex; 

IF ((nChunkIndex * GVL.MAX_CHUNK_SIZE + GVL.MAX_CHUNK_SIZE) <= nStepsSoFar) THEN
	getLogChunk.nChunkSizeBytes := GVL.MAX_CHUNK_SIZE*SIZEOF(ST_CalibTrialStep);
	MEMCPY(ADR(getLogChunk.aChunk), ADR(aTrialDataBuffer[nChunkIndex*GVL.MAX_CHUNK_SIZE]), getLogChunk.nChunkSizeBytes); 
ELSE
	nRemainingPts := nStepsSoFar - nChunkIndex * GVL.MAX_CHUNK_SIZE; 
	getLogChunk.nChunkSizeBytes := nRemainingPts*SIZEOF(ST_CalibTrialStep);
	MEMCPY(ADR(getLogChunk.aChunk), ADR(aTrialDataBuffer[nChunkIndex*GVL.MAX_CHUNK_SIZE]), getLogChunk.nChunkSizeBytes); 
	getLogChunk.nLastPointIndex := nRemainingPts; 
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getLogSize" Id="{7b718c47-fbba-4cff-9041-c2cce67f9901}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD getLogSize : BOOL
VAR_INPUT
END_VAR
VAR_OUTPUT
	nCurrentChunkSize : DINT := GVL.MAX_CHUNK_SIZE; 
	nNumLogPoints : DINT := nStepsSoFar;
	nNumLogChunks : DINT; 
	nSizeLastChunk : DINT; 
	nLogSizeBytes : DINT := nStepsSoFar * SIZEOF(ST_CalibTrialStep); 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nNumLogChunks := nStepsSoFar / GVL.MAX_CHUNK_SIZE;
nSizeLastChunk := nStepsSoFar MOD GVL.MAX_CHUNK_SIZE; 

IF (nSizeLastChunk <> 0) THEN
	nNumLogChunks := nNumLogChunks + 1; // Since the last chunk is there, just smaller
ELSE
	// If somehow we have exactly as many data points that can be divided evenly into chunks
	nSizeLastChunk := GVL.MAX_CHUNK_SIZE; 
END_IF

// Also return false if there is no log 
IF nStepsSoFar = 0 THEN 
	getLogSize := FALSE;
ELSE
	getLogSize := TRUE; 
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="writeLog" Id="{d1d636aa-7c2d-44bb-86b2-56a1cc65fc74}">
      <Declaration><![CDATA[METHOD writeLog : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bWriteToDisk := TRUE; ]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="CalibrationBlockLogger">
      <LineId Id="9" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="221" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="206" Count="0" />
      <LineId Id="58" Count="2" />
      <LineId Id="62" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="227" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="230" Count="1" />
      <LineId Id="233" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="237" Count="3" />
      <LineId Id="232" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="258" Count="1" />
      <LineId Id="247" Count="0" />
      <LineId Id="250" Count="3" />
      <LineId Id="248" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="260" Count="1" />
      <LineId Id="399" Count="3" />
      <LineId Id="404" Count="5" />
      <LineId Id="421" Count="1" />
      <LineId Id="262" Count="1" />
      <LineId Id="413" Count="7" />
      <LineId Id="423" Count="1" />
      <LineId Id="426" Count="3" />
      <LineId Id="277" Count="0" />
      <LineId Id="279" Count="3" />
      <LineId Id="255" Count="0" />
      <LineId Id="283" Count="1" />
      <LineId Id="345" Count="0" />
      <LineId Id="358" Count="0" />
      <LineId Id="346" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="354" Count="0" />
      <LineId Id="356" Count="1" />
      <LineId Id="257" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="286" Count="1" />
      <LineId Id="289" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="293" Count="1" />
      <LineId Id="297" Count="1" />
      <LineId Id="300" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="308" Count="4" />
      <LineId Id="303" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="314" Count="1" />
      <LineId Id="317" Count="0" />
      <LineId Id="319" Count="2" />
      <LineId Id="318" Count="0" />
      <LineId Id="322" Count="5" />
      <LineId Id="329" Count="0" />
      <LineId Id="331" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="333" Count="0" />
      <LineId Id="335" Count="4" />
      <LineId Id="343" Count="0" />
      <LineId Id="340" Count="2" />
      <LineId Id="334" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="316" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="199" Count="3" />
      <LineId Id="37" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="CalibrationBlockLogger.addStep">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="6" />
    </LineIds>
    <LineIds Name="CalibrationBlockLogger.getLogChunk">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="18" Count="2" />
      <LineId Id="34" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="CalibrationBlockLogger.getLogSize">
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="2" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="4" />
    </LineIds>
    <LineIds Name="CalibrationBlockLogger.writeLog">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>