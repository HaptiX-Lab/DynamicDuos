<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN_DOCILE" Id="{8da34e1f-b37f-4e7b-92ac-d1cbde2b3e62}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN_DOCILE
VAR
	
	// Variables for logging
	nEncoderCounts : LINT; 
	rEncoderDegrees : REAL;
	rEncoderLastDegrees : REAL; 
	rEncoderRadians : REAL; 
	rEncoderLastRadians : REAL; 
	rEncoderRadiansBuffer : ARRAY[1..FILTER_WINDOW] OF REAL; 
	rEncoderRadiansSum : REAL; 
	rEncoderRadiansFiltered : REAL; 
	nFilterBufferCount : INT := 0; 
	rGripForce : REAL; 
	
	// Sensors instantiation 
	fbEncoder1 : FB_QuadratureEncoder;
	fbLoadCell : FB_AnalogLoadCellInput;
	fbMotor1 : FB_AnalogMotorDriver;	

	
	// Helpers
	i : INT := 0;
	j : INT := 0;
	bIsFirstReset : BOOL := TRUE; 
	bEncoderReset : BOOL := FALSE; 
	fbSystemTime : GETSYSTEMTIME;
	
	stMasterState : MasterStateType := MasterStateType.WAITING; 
	
	
	// Child function block 
	{attribute 'OPC.UA.DA':='1'}
	fbCalibrationBlock : CalibrationBlock_DOCILE; 
	
	testCalibrationSettings : ST_CalibrationSettings; 

END_VAR
VAR CONSTANT
	// Constants for digital filtering 
	FILTER_WINDOW : INT := 11; 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// ===================================================== COMPLETE ALL SENSOR READINGS ========================================================
IF bIsFirstReset OR bEncoderReset THEN 
	fbEncoder1.Reset();
	bIsFirstReset := FALSE;
	bEncoderReset := FALSE; 
END_IF

// Encoders 
fbEncoder1(); 
nEncoderCounts := fbEncoder1.nNetCounts; 
rEncoderDegrees := fbEncoder1.rDegrees; 
rEncoderLastDegrees := fbEncoder1.rLastDegrees; 
rEncoderRadians := fbEncoder1.rRadians; 
rEncoderLastRadians := fbEncoder1.rLastRadians;

// Update digital filter. 
IF nFilterBufferCount < FILTER_WINDOW THEN 
	nFilterBufferCount := nFilterBufferCount + 1; 
END_IF

// Shift the buffer and add the new reading 
FOR i := FILTER_WINDOW TO 2 BY -1 DO
	rEncoderRadiansBuffer[i] := rEncoderRadiansBuffer[i-1]; 
END_FOR
rEncoderRadiansBuffer[1] := rEncoderRadians;

// Compute the moving average only if the buffer is full
j := MIN(nFilterBufferCount, FILTER_WINDOW); 
rEncoderRadiansSum := 0.0; 
FOR i:= 1 TO j DO
	rEncoderRadiansSum := rEncoderRadiansSum + rEncoderRadiansBuffer[i];
END_FOR
rEncoderRadiansFiltered := rEncoderRadiansSum / j; 

// Load cell   
fbLoadCell(); 
rGripForce := fbLoadCell.rCalibratedOutput; 
// ================================================ END SENSOR READINGS ==================================================

IF stMasterState = MasterStateType.CALIBRATION THEN 
	fbCalibrationBlock(
		rEncoderRadians := rEncoderRadians,
		rEncoderRadiansFiltered := rEncoderRadiansFiltered,
		rEncoderLastRadians := rEncoderLastRadians, 
		rGripForce := rGripForce,
		fbMotorReference := fbMotor1
	);
END_IF



// ================================================= UPDATE THE GVL ======================================================
GVL.ENCODER_1_DEGREES := fbEncoder1.rDegrees; 
GVL.LOAD_CELL_NEWTONS := rGripForce; 
fbSystemTime(timeLoDW => GVL.MAIN_SYSTEM_TIME); ]]></ST>
    </Implementation>
    <LineIds Name="MAIN_DOCILE">
      <LineId Id="71" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="21" Count="25" />
      <LineId Id="48" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="75" Count="1" />
      <LineId Id="126" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="131" Count="2" />
      <LineId Id="137" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="77" Count="2" />
      <LineId Id="73" Count="0" />
      <LineId Id="80" Count="2" />
    </LineIds>
  </POU>
</TcPlcObject>